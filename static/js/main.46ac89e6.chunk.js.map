{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","cornQuantity","setCornQuantity","geeseQuantity","setGeeseQuantity","message","costPerBag","className","style","backgroundImage","process","backgroundPosition","backgroundSize","backgroundRepeat","forhtml","type","id","name","value","onChange","e","Number","parseInt","target","console","log","parseFloat","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAsFeA,MAlFf,WAAgB,IAAD,EAC2BC,mBAAS,GADpC,mBACNC,EADM,KACQC,EADR,OAE6BF,mBAAS,GAFtC,mBAENG,EAFM,KAESC,EAFT,OAGiBJ,mBAAS,oBAH1B,mBAGNK,EAHM,KAIPC,GAJO,KAIM,KA8BnB,OACE,sBAAKC,UAAU,MAAf,UAEE,wBACEA,UAAU,aACVC,MAAO,CACLC,gBAAgB,OAAD,OAASC,4BAAT,KACfC,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,aANtB,SASE,sDAEF,qBAAKN,UAAU,cAAf,SACE,iCACE,oDAEA,qCACE,sBAAKA,UAAU,cAAf,UACE,uBAAOO,QAAQ,eAAf,4BACA,uBACEC,KAAK,SACLC,GAAG,eACHC,KAAK,WACLC,MAAOjB,EACPkB,SArDc,SAACC,GAC3B,IAAMF,EAAQG,OAAOC,SAASF,EAAEG,OAAOL,MAAO,KAAO,EACrDM,QAAQC,IAAI,mBAAoBP,GAChChB,EAAgBgB,SAqDR,sBAAKX,UAAU,cAAf,UACE,uBAAOO,QAAQ,gBAAf,6BACA,uBACEC,KAAK,SACLC,GAAG,gBACHC,KAAK,WACLC,MAAOf,EACPgB,SAxDe,SAACC,GAC5B,IAAMF,EAAQG,OAAOC,SAASF,EAAEG,OAAOL,MAAO,KAAO,EACrDM,QAAQC,IAAI,oBAAqBP,GACjCd,EAAiBc,YAyDX,0CArDFjB,EAAe,EACVyB,WAAWzB,EAAeK,GAAYqB,QAAQ,GAGnDxB,EAAgB,EACXuB,WAAWvB,EAAgBG,GAAYqB,QAAQ,GAGpD1B,GAAgB,GAAKE,GAAiB,EACjCuB,WAAWpB,GAAYqB,QAAQ,QADxC,KA8CM,mBAAGpB,UAAU,YAAb,SAA0BF,aCnErBuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.46ac89e6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [cornQuantity, setCornQuantity] = useState(0);\n  const [geeseQuantity, setGeeseQuantity] = useState(0);\n  const [message, setMessage] = useState('No cargo to take');\n  const costPerBag = 0.25;\n\n  // DRY\n  const cornQuantityHandler = (e) => {\n    const value = Number.parseInt(e.target.value, 10) || 0;\n    console.log(\"Quantity of corn\", value);\n    setCornQuantity(value);\n  };\n\n  // DRY\n  const geeseQuantityHandler = (e) => {\n    const value = Number.parseInt(e.target.value, 10) || 0;\n    console.log(\"Quantity of geese\", value);\n    setGeeseQuantity(value);\n  };\n\n  const calculateCostOfTrip = () => {    \n    if (cornQuantity > 0) {\n      return parseFloat(cornQuantity * costPerBag).toFixed(2);\n    }\n    \n    if (geeseQuantity > 0) {\n      return parseFloat(geeseQuantity * costPerBag).toFixed(2);\n    }\n\n    if (cornQuantity <= 0 && geeseQuantity <= 0) {\n      return parseFloat(costPerBag).toFixed(2);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {/* TODO: Extract Header Component */}\n      <header\n        className=\"App-header\"\n        style={{\n          backgroundImage: `url(${process.env.PUBLIC_URL + \"/farm.jpg\"})`,\n          backgroundPosition: \"center\",\n          backgroundSize: \"cover\",\n          backgroundRepeat: \"no-repeat\",\n        }}\n      >\n        <h1>River trip adviser</h1>\n      </header>\n      <div className=\"App-content\">\n        <form>\n          <legend>Plan your trip</legend>\n          {/* TODO: Extract Trip Calculator Component */}\n          <fieldset>\n            <div className=\"input-group\">\n              <label forhtml=\"cornQuantity\">Corn Quantity:</label>\n              <input\n                type=\"number\"\n                id=\"cornQuantity\"\n                name=\"quantity\"\n                value={cornQuantity}\n                onChange={cornQuantityHandler}\n              />\n            </div>\n            <div className=\"input-group\">\n              <label forhtml=\"geeseQuantity\">Geese Quantity:</label>\n              <input\n                type=\"number\"\n                id=\"geeseQuantity\"\n                name=\"quantity\"\n                value={geeseQuantity}\n                onChange={geeseQuantityHandler}\n              />\n            </div>\n          </fieldset>\n          <label>Â£ {calculateCostOfTrip()}</label>\n          <p className=\"user-info\">{message}</p>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}